{"version":3,"sources":["index.js"],"names":["UserList","props","sortByFirst","bind","sortByLast","state","results","dob","date","gender","location","country","name","first","last","sortedByFirst","sortedByLast","fetch","then","res","json","setState","console","log","className","scope","onClick","this","map","user","UserRow","key","sortedResults","sort","a","b","name1","toLowerCase","name2","React","Component","UserDataCell","data","DateOfBirthCell","BirthdayCell","format","message","dobDate","Date","todayDate","getMonth","getDate","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d1c59ccb.chunk.js","sourcesContent":["/*\n * Jeffrey Winning\n * swiftwinning @ gmail . com\n * 617 595 8972\n * \n * Brown CIS - Random User API Parser Application\n * \n * This is a one-page React.js application for fetching and dynamically displaying\n * the data of random users from the randomuser.me API.\n *\n * It retrieves an Array of 20 users from U.S. and Canada, taking only the data\n * needed for our data model: gender, name, location, and dob.\n *\n * It includes the Bonus Feature of dynamic re-sorting of the user Array by writing\n * a custom compareFunction for the Array.prototype.sort() method,\n * and it uses the libraries bootstrap and react-moment to format the table and the dates.\n *\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Moment from 'react-moment';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n//  Constructor class creates a sortable list of random users\nclass UserList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.sortByFirst = this.sortByFirst.bind(this);\n        this.sortByLast = this.sortByLast.bind(this);\n        this.state = {\n            results: [{\n\t\t\t\tdob: {date: 0},\n\t\t\t\tgender: \"\",\n\t\t\t\tlocation: {country: \"\"},\n\t\t\t\tname: {first: \"\", last: \"\"},\n\t        }],\n\t        sortedByFirst: false,\n\t        sortedByLast: false\n\t    };\n    }\n  \n    componentDidMount(){\n\t    //  API request requirements: get 20 random users from United States or Canada,\n\t    //  limit request to needed data: gender, name, location, date of birth\n\t    const URL =\n\t\t    'https://randomuser.me/api/?results=20&nat=us,ca&inc=gender,name,location,dob';\n\t    fetch(URL)\n\t\t    .then(res => res.json())\n\t\t    .then(res => {\n\t\t        this.setState({results: res.results});\n\t\t        console.log(\"fetch(URL) Results:\");\n\t\t        console.log(this.state.results);\n\t        });\n\t}\n\t\n\t//  render function for UserList component\n\t//  clickable table headers are included here instead of in separate component\n\t//  so they can have direct access to set state of UserList \n\trender() {\n\t    return (\n\t        <table className=\n\t            \"table table-striped table-bordered table-hover table-sm\" >\n\t            <thead className=\"thead-dark\" >\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th scope=\"col\" >Gender</th>\n\t\t\t\t\t\t<th scope=\"col\" onClick={this.sortByFirst} >\n\t\t\t\t\t\t    First Name &uarr; &darr;\n\t\t\t\t\t\t</th>\n\t\t\t\t\t\t<th scope=\"col\" onClick={this.sortByLast} >\n\t\t\t\t\t\t    Last Name <span>&uarr; &darr;</span>\n\t\t\t\t\t\t</th>\n\t\t\t\t\t\t<th scope=\"col\" >Country</th>\n\t\t\t\t\t\t<th scope=\"col\" >Date of Birth</th>\n\t\t\t\t\t\t<th scope=\"col\" >Birthday</th>\n\t\t\t\t\t</tr>\n\t            </thead>\n\t            <tbody>\n\t\t\t\t\t{\n\t\t\t\t\t    this.state.results.map(\n\t\t\t\t\t\t\tuser => {\n\t\t\t\t\t\t\t\treturn (<UserRow \n\t\t\t\t\t\t\t\t    user={user} \n\t\t\t\t\t\t\t\t    //  A perfect key is guaranteed to be unique.\n\t\t\t\t\t\t\t\t    //  This is imperfect because randomization might lead \n\t\t\t\t\t\t\t\t    //  to duplicates and create console warnings.\n\t\t\t\t\t\t\t\t    key={user.name.last + user.dob.date} \n\t\t\t\t\t\t\t\t/>);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t</tbody>\n\t        </table>\n\t    )\n\t}\n\t\n\t//  Function called by clicking First Name table header\n\t//  Customized compareFunction accesses first name from data structure of user array\n\t//  It uses ascending or descending version depending on sortedByFirst boolean marker\n\tsortByFirst() {\n\t    var sortedResults;\n\t    if (!this.state.sortedByFirst) {\n\t\t\tsortedResults = this.state.results.sort(function(a, b) {\n\t\t\t\t\tconst name1 = a.name.first.toLowerCase();\n\t\t\t\t\tconst name2 = b.name.first.toLowerCase();\n\t\t\t\t\tif (name1 < name2) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t} else if (name1 > name2) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t    sortedResults = this.state.results.sort(function(a, b) {\n\t\t\t\t\tconst name1 = a.name.first.toLowerCase();\n\t\t\t\t\tconst name2 = b.name.first.toLowerCase();\n\t\t\t\t\tif (name1 < name2) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t} else if (name1 > name2) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tthis.setState({\n            results: sortedResults,\n\t        sortedByFirst: !this.state.sortedByFirst,\n\t        sortedByLast: false\n\t    });\n\t}\n\t\n\t//  Function called by clicking Last Name table header\n\t//  Customized compareFunction accesses last name from data structure of user array\n\t//  It uses ascending or descending version depending on sortedByLast boolean marker\n\tsortByLast() {\n\t    var sortedResults;\n\t    if (!this.state.sortedByLast) {\n\t\t\tsortedResults = this.state.results.sort(function(a, b) {\n\t\t\t\t\tconst name1 = a.name.last.toLowerCase();\n\t\t\t\t\tconst name2 = b.name.last.toLowerCase();\n\t\t\t\t\tif (name1 < name2) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t} else if (name1 > name2) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t    sortedResults = this.state.results.sort(function(a, b) {\n\t\t\t\t\tconst name1 = a.name.last.toLowerCase();\n\t\t\t\t\tconst name2 = b.name.last.toLowerCase();\n\t\t\t\t\tif (name1 < name2) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t} else if (name1 > name2) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tthis.setState({\n            results: sortedResults,\n\t        sortedByFirst: false,\n\t        sortedByLast: !this.state.sortedByLast\n\t    });\n\t}\n}\n\n//  Class creates a row of all the required data fields for one user in our data model:\n//  gender, first name, last name, country, date of birth, and birthday message\nclass UserRow extends React.Component {\n\trender() {\n\t    return (\n\t        <tr>\n\t            <UserDataCell data={this.props.user.gender} />\n\t            <UserDataCell data={this.props.user.name.first} />\n\t            <UserDataCell data={this.props.user.name.last} />\n\t            <UserDataCell data={this.props.user.location.country} />\n\t            <DateOfBirthCell dob={this.props.user.dob} />\n\t            <BirthdayCell dob={this.props.user.dob} />\n\t        </tr>\n\t    )\n\t}\n}\n\n//  Component class creates a general use table cell for storing various user data\nclass UserDataCell extends React.Component {\n  render() {\n\t    return (\n\t        <td>{this.props.data}</td>\n\t    );\n\t}\n}\n\n//  Component class for date of birth table cell\n//  Provides special formatting of date using Moment from react-moment\nclass DateOfBirthCell extends React.Component {\n    render() {\n        return (\n            <td>\n                <Moment format=\"MMM D, YYYY\">{this.props.dob.date}</Moment>\n            </td>\n        );\n    }\n}\n\n//  Component class for Birthday table cell\n//  Dynamically creates message by comparing date of birth to today's date\nclass BirthdayCell extends React.Component {\n    render() {\n        let message;\n        const dobDate = new Date(this.props.dob.date);\n        const todayDate = new Date();\n        \n        //  First check if user's birth month is earlier or later than today's month\n        //  Then check if user's birth date is earlier or later than today's date\n        if (dobDate.getMonth() < todayDate.getMonth()) {\n\t\t    message = \"already happened\";\n\t\t} else if (dobDate.getMonth() > todayDate.getMonth()){\n\t\t    message = \"has yet to occur\";\n\t\t} else if (dobDate.getDate() < todayDate.getDate()){\n\t\t    message = \"already happened\";\n\t\t} else if (dobDate.getDate() > todayDate.getDate()){\n\t\t    message = \"has yet to occur\";\n\t\t} else {\n\t\t    message = \"is today!\";\n\t\t}\n\t\treturn <td>{message}</td>;\n    }\n}\n\n//  Renders the UserList app in the DOM\nReactDOM.render(\n    <div>\n        <h1>20 Random Users from U.S. & Canada</h1>\n        <p>Sort by clicking First Name and Last Name</p>\n        <UserList />\n    </div>,\n    document.getElementById('root')\n);"],"sourceRoot":""}